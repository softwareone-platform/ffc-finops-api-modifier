import logging
from unittest.mock import AsyncMock, patch

import pytest
from httpx import AsyncClient

from app.core.exceptions import OptScaleAPIResponseError
from app.optscale_api.invitation_api import OptScaleInvitationAPI
from app.optscale_api.users_api import OptScaleUserAPI


@pytest.fixture
def mock_register_invited():
    patcher = patch.object(OptScaleUserAPI, "create_user", new=AsyncMock())
    mock = patcher.start()
    yield mock
    patcher.stop()


@pytest.fixture
def mock_decline_invitation():
    patcher = patch.object(OptScaleInvitationAPI, "decline_invitation", new=AsyncMock())
    mock = patcher.start()
    yield mock
    patcher.stop()


async def test_register_invited_user(
    async_client: AsyncClient, test_data: dict, mock_register_invited
):
    payload = test_data["invitation"]["case_create"]["payload"]
    mocked_response = {
        "status_code": 201,
        "data": {
            "created_at": 1734363128,
            "deleted_at": 0,
            "display_name": "Daitarn3",
            "email": "haran.banjo@email.com",
            "id": "d174e9f4-97dc-43f5-b2a8-6bcfc2e634cd",
            "is_active": True,
            "is_password_autogenerated": False,
            "jira_connected": False,
            "scope_id": None,
            "slack_connected": False,
            "token": None,
            "type_id": 1,
            "verified": False,
        },
    }
    want = test_data["invitation"]["case_create"]["response"]
    mock_register_invited.return_value = mocked_response
    response = await async_client.post("/invitations/users", json=payload)
    assert response.status_code == 201
    got = response.json()
    for k, v in want.items():
        assert (
            got[k] == v
        ), f"Mismatch in response for key '{k}': expected {v}, got {got[k]}"


async def test_register_invited_user_exception_handling(
    async_client: AsyncClient, test_data: dict, mock_register_invited, caplog
):
    # Simulate an exception in `create_user`
    mock_register_invited.side_effect = OptScaleAPIResponseError(
        title="Error response from OptScale", reason="Test Exception", status_code=403
    )

    payload = test_data["invitation"]["case_create"]["payload"]

    # Capture logs
    with caplog.at_level(logging.ERROR):
        # Send request with valid JWT token
        response = await async_client.post("/invitations/users", json=payload)

    # Verify the response status and content
    assert (
        response.status_code == 403
    ), "Expected 403 Forbidden when an exception occurs in user creation"
    got = response.json()
    assert got.get("detail").get("errors") == {"reason": "Test Exception"}
    # Verify the log entry
    assert (
        "Exception occurred during user creation: Error response from OptScale"
        in caplog.text
    ), "Expected error log message for the exception"


async def test_decline_invitation(async_client: AsyncClient, mock_decline_invitation):
    mock_decline_invitation.return_value = {"status_code": 204}

    response = await async_client.post(
        "/invitations/users/invites/bf9f6c28-53c5-40ab-b530-4850ca5fc27f/decline",
        headers={"Authorization": "Bearer valid_token"},
        json={"user_id": "b57b9964-7046-4e20-812c-01ab52cf4661"},
    )  # noqa: E501
    assert response.status_code == 204
    mock_decline_invitation.assert_called_once_with(
        invitation_id="bf9f6c28-53c5-40ab-b530-4850ca5fc27f",
        user_access_token="valid_token",
    )


async def test_decline_invitation_handle_exception(
    async_client: AsyncClient, mock_decline_invitation, caplog
):
    mock_decline_invitation.side_effect = OptScaleAPIResponseError(
        title="Error response from OptScale", reason="Test Exception", status_code=403
    )
    with caplog.at_level(logging.ERROR):
        # Send request with valid JWT token
        response = await async_client.post(
            "/invitations/users/invites/bf9f6c28-53c5-40ab-b530-4850ca5fc27f/decline",
            json={"user_id": "b57b9964-7046-4e20-812c-01ab52cf4661"},
            headers={"Authorization": "Bearer valid_token"},
        )

    # Verify the response status and content
    assert (
        response.status_code == 403
    ), "Expected 403 Forbidden when an exception occurs in user creation"
    got = response.json()
    assert got.get("detail").get("errors") == {"reason": "Test Exception"}
    # Verify the log entry
    assert (
        "Exception occurred during user creation: Error response from OptScale"
        in caplog.text
    ), "Expected error log message for the exception"
