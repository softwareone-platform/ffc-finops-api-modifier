from __future__ import annotations

import logging

from fastapi import Depends

from app.core.exceptions import InvitationDoesNotExist
from app.optscale_api.invitation_api import OptScaleInvitationAPI
from app.optscale_api.users_api import OptScaleUserAPI

logger = logging.getLogger(__name__)


async def validate_user_invitation(email: str) -> bool:
    """
    This function checks if an invitation exists for the given email address.
    It's useful to decide whether the registration of a new user has to
    be allowed.
    :param email: The user's email address
    :return: True or False
    """

    invitation_api = OptScaleInvitationAPI()
    response = await invitation_api.get_list_of_invitations(email=email)
    no_invitations = {"invites": []}  # if no invitations were found
    if response.get("data", {}) == no_invitations:
        # there is no invitation
        return False
    else:
        return True


async def validate_email_and_add_invited_user(
    optscale_user_api: Depends(OptScaleUserAPI),
    email: str,
    display_name: str,
    password: str,
    admin_token: str,
) -> dict | Exception:
    """
    It adds a new user to OptScale ONLY if an invitation has been
    generated for the given email address.
    The  user will need to verify the registration by checking
    the link received by email
    Otherwise, an exception will be raised.

    :param optscale_user_api: an instance of OptScaleUSerAPI
    :param email: the email address of the invited user
    :param display_name: The user's name to add
    :param password: The user's password to add
    :param admin_token: The Secret API Key required to run this operation
    :return:
    A dict like
     {
            "created_at": 1730126521,
            "deleted_at": 0,
            "id": "f0bd0c4a-7c55-45b7-8b58-27740e38789a",
            "display_name": "Spider Man",
            "is_active": true,
            "type_id": 1,
            "email": "peter.parker@iamspiderman.com",
            "scope_id": null,
            "slack_connected": false,
            "is_password_autogenerated": false,
            "jira_connected": false,
            "token": null
            "verified" : false
      }
      raises: InvitationDoesNotExist if there is no invitation
    """
    email_check = await validate_user_invitation(email=email)
    if not email_check:
        logger.error(f"An error occurred registering the invited user {email}")
        raise InvitationDoesNotExist(f"There is no invitation for this email  {email}")

    response = await optscale_user_api.create_user(
        email=email,
        display_name=display_name,
        password=password,
        admin_api_key=admin_token,
        verified=False,
    )
    return response


async def add_new_user(
    optscale_user_api: Depends(OptScaleUserAPI),
    email: str,
    display_name: str,
    password: str,
    admin_token: str,
) -> dict | Exception:
    """
        It adds a new user to OptScale. The new user will be already verified

        :param optscale_user_api: an instance of OptScaleUSerAPI
        :param email: The user's email address
        :param display_name: The user's name to add
        :param password: The user's password to add
        :param admin_token: The Secret API Key required to run this operation
        :return: A dict like
            {
        "created_at": 1737449293,
        "deleted_at": 0,
        "id": "ae2d4051-bf6c-4bf4-aa62-f9f7427f415c",
        "display_name": "Dylan Dog4",
        "is_active": true,
        "type_id": 1,
        "email": "dyland.dog6@mystery2.com",
        "verified": true,
        "scope_id": null,
        "slack_connected": false,
        "is_password_autogenerated": false,
        "jira_connected": false,
        "token": "token_heere"
    }

    """
    response = await optscale_user_api.create_user(
        email=email,
        display_name=display_name,
        password=password,
        admin_api_key=admin_token,
        verified=True,
    )
    return response
