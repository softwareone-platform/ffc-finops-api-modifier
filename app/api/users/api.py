from __future__ import annotations

import logging

from fastapi import APIRouter, Depends
from fastapi import status as http_status
from starlette.responses import JSONResponse

from app import settings
from app.api.users.model import CreateUserData, CreateUserResponse
from app.api.users.services.optscale_users_registration import (
    add_new_user,
    validate_email_and_add_invited_user,
)
from app.core.auth_jwt_bearer import JWTBearer
from app.core.exceptions import (
    APIResponseError,
    InvitationDoesNotExist,
    UserAccessTokenError,
    format_error_response,
)
from app.optscale_api.users_api import OptScaleUserAPI

logger = logging.getLogger(__name__)
router = APIRouter()


@router.post(
    path="",
    status_code=http_status.HTTP_201_CREATED,
    response_model=CreateUserResponse,
    dependencies=[],
)
async def create_user(
    data: CreateUserData,
    optscale_user_api: OptScaleUserAPI = Depends(),
    jwt_token: dict = Depends(JWTBearer(allow_unauthenticated=True)),
):
    """
    This endpoint registers users in OptScale.
    It can be consumed in two ways:
    1. If a JWT Token is provided, the user will be created and verified.
    2. IF no Authentication is provided, the given user will be created ONLY
        if an invitation exists with the provided email address. If an invitation exists,
        the user will be created but not auto-verified. The user has to perform
        the verification action.

    It returns the created user's details.

    :param jwt_token: a JWT token or None
    :param data: The input data required to create a user.
    :param optscale_user_api: An instance of OptScaleOrgAPI for managing organization operations.
                    Dependency injection via `Depends()`.

    :return: A response model containing the details of the newly created user.
    Example

        {
            "created_at": 1730126521,
            "deleted_at": 0,
            "id": "f0bd0c4a-7c55-45b7-8b58-27740e38789a",
            "display_name": "Spider Man",
            "is_active": true,
            "type_id": 1,
            "email": "peter.parker@iamspiderman.com",
            "scope_id": null,
            "slack_connected": false,
            "is_password_autogenerated": false,
            "jira_connected": false,
            "token": "token_here"
      }

    This Endpoint, returns a formatted error object like this one, as a result of
        each exception.
        {
            "detail": {
                "type": "https://datatracker.ietf.org/doc/html/rfc7231#section-6.5.3",
                "title": "Error response from OptScale",
                "status": 403,
                "traceId": "c4bd62b3fe154456af99380796fb669c",
                "errors": {
                    "reason": "Oh no, I made a mistake!"
                }
            }
        }
    :dependencies:
        JWTBearer: Ensures that the request is authenticated using a valid JWT.
    """
    try:
        if jwt_token is None:
            response = await validate_email_and_add_invited_user(
                email=str(data.email),
                display_name=data.display_name,
                password=data.password,
                admin_token=settings.admin_token,
                optscale_user_api=optscale_user_api,
            )
            logger.info(f"Invited User successfully registered: {response}")
        else:
            response = await add_new_user(
                email=str(data.email),
                display_name=data.display_name,
                password=data.password,
                admin_token=settings.admin_token,
                optscale_user_api=optscale_user_api,
            )
            logger.info(f"User successfully created: {response}")
        return JSONResponse(
            status_code=response.get("status_code", http_status.HTTP_201_CREATED),
            content=response.get("data", {}),
        )

    except (
        APIResponseError,
        UserAccessTokenError,
        InvitationDoesNotExist,
    ) as error:
        return format_error_response(error)
