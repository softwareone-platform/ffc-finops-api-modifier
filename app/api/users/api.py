from __future__ import annotations

from fastapi import APIRouter, Depends
from fastapi import status as http_status
from starlette.responses import JSONResponse

from app import settings
from app.api.users.model import CreateUserData, CreateUserResponse
from app.core.auth_jwt_bearer import JWTBearer, handle_jwt_dependency
from app.core.exceptions import (
    APIResponseError,
    InvitationDoesNotExist,
    UserAccessTokenError,
    format_error_response,
)
from app.optscale_api.users_api import OptScaleUserAPI

router = APIRouter()


@router.post(
    path="",
    status_code=http_status.HTTP_201_CREATED,
    response_model=CreateUserResponse,
    dependencies=[],
)
async def create_user(
    data: CreateUserData,
    user_api: OptScaleUserAPI = Depends(),
    jwt_payload: dict = Depends(JWTBearer()),
):
    """
    This endpoint registers users in OptScale.
    It can be consumed in two ways:
    1. If a JWT Token is provided, the user will be created and verified.
    2. IF no Authentication is provided, the given user will be created ONLY
        if an invitation exists with the provided email address. If an invitation exists,
        the user will be created but not auto-verified. The user has to perform
        the verification action.

    It returns the created user's details.

    :param jwt_payload: A dictionary that will contain the access token or an error
    :param data: The input data required to create a user.
    :param user_api: An instance of OptScaleOrgAPI for managing organization operations.
                    Dependency injection via `Depends()`.

    :return: A response model containing the details of the newly created user.
    Example

        {
            "created_at": 1730126521,
            "deleted_at": 0,
            "id": "f0bd0c4a-7c55-45b7-8b58-27740e38789a",
            "display_name": "Spider Man",
            "is_active": true,
            "type_id": 1,
            "email": "peter.parker@iamspiderman.com",
            "scope_id": null,
            "slack_connected": false,
            "is_password_autogenerated": false,
            "jira_connected": false,
            "token": "token_here"
      }

    This Endpoint, returns a formatted error object like this one, as a result of
        each exception.
        {
            "detail": {
                "type": "https://datatracker.ietf.org/doc/html/rfc7231#section-6.5.3",
                "title": "Error response from OptScale",
                "status": 403,
                "traceId": "c4bd62b3fe154456af99380796fb669c",
                "errors": {
                    "reason": "Oh no, I made a mistake!"
                }
            }
        }
    :dependencies:
        JWTBearer: Ensures that the request is authenticated using a valid JWT.
    """
    try:
        auto_verified, check_user_email = await process_authentication_info(jwt_payload)

        response = await user_api.create_user(
            email=str(data.email),
            display_name=data.display_name,
            password=data.password,
            admin_api_key=settings.admin_token,
            verified=auto_verified,
            check_user_email=check_user_email,
        )
        return JSONResponse(
            status_code=response.get("status_code", http_status.HTTP_201_CREATED),
            content=response.get("data", {}),
        )

    except (
        APIResponseError,
        UserAccessTokenError,
        InvitationDoesNotExist,
    ) as error:
        return format_error_response(error)


async def process_authentication_info(jwt_payload: dict):
    """


    :param jwt_payload: jwt_payload is a dict with the result of calling the JWTBearer class.
    :return: Bool or raise an APIResponseError if the token is not valid
    """
    check_user_email = False
    auto_verified = True
    if jwt_payload.get("error"):
        if jwt_payload.get("error") == "Authentication not provided":
            # Try to see if the user has been invited to the platform
            check_user_email = True
            auto_verified = False
        else:
            # The token provided is not valid. APIResponseError
            handle_jwt_dependency(jwt_payload)
    return auto_verified, check_user_email
