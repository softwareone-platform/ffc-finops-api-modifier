from unittest.mock import AsyncMock

import pytest
from app.optscale_api.users_api import OptScaleUserAPI


@pytest.mark.asyncio
class TestOptscaleAPI:

    @pytest.fixture(autouse=True)
    def setup(self, mocker):
        # Initialize OptScaleAPI instance
        self.opt_scale_api = OptScaleUserAPI()


        # Mock the post method on the APIClient instance's client
        self.mock_post = mocker.patch.object(self.opt_scale_api.api_client, 'post')

        self.mock_get = mocker.patch.object(self.opt_scale_api.api_client, 'get')
        mock_obtain_admin_api_key_response = {"Secret": "f2312f2b-46h0-4456-o0i9-58e64f2j6725"}
        self.opt_scale_api._auth_client.obtain_admin_api_key = AsyncMock(
            return_value=mock_obtain_admin_api_key_response)

    async def test_create_valid_user(self):
        mock_response = {
            "created_at": 1730126521,
            "deleted_at": 0,
            "id": "f0bd0c4a-7c55-45b7-8b58-27740e38789a",
            "display_name": "Spider Man",
            "is_active": True,
            "type_id": 1,
            "email": "peter.parker@iamspiderman.com",
            "scope_id": None,
            "slack_connected": False,
            "is_password_autogenerated": False,
            "jira_connected": False,
            "token": "MDAwZWxvY2F0aW9uIAowMDM0aWRlbnRpZmllciBmMGJkMGM0YS03YzU1LTQ1YjctOGI1OC0yNzc0MGUzODc4OWEKMDAyMmNpZCBjcmVhdGVkOjE3MzAxMjY1MjEuMDMwNzU4CjAwMTZjaWQgcmVnaXN0ZXI6VHJ1ZQowMDFhY2lkIHByb3ZpZGVyOm9wdHNjYWxlCjAwMmZzaWduYXR1cmUg4Ri0H_K4_xmY_fp8WvfIqZbzsrXK0P6I0KVTi8gRHkYK"
        }
        self.mock_post.return_value = mock_response
        # Define input values
        email = "peter.parker@iamspiderman.com"
        display_name = "Spider Man"
        password = "With great power comes great responsibility"
        result = await self.opt_scale_api.create_user(email=email, display_name=display_name, password=password)

        self.mock_post.assert_called_once_with(
            endpoint="/auth/v2/users",
            data={
                "email": email,
                "display_name": display_name,
                "password": password
            }
        )
        assert result == mock_response

    async def test_create_duplicate_user(self):
        mock_response = {
            "error": {
                "status_code": 409,
                "error_code": "OA0042",
                "reason": "User peter.parker@iamspiderman.com already exists",
                "params": [
                    "peter.parker@iamspiderman.com"
                ]
            }
        }
        self.mock_post.return_value = mock_response
        # Define input values
        email = "peter.parker@iamspiderman.com"
        display_name = "Spider Man"
        password = "With great power comes great responsibility"
        result = await self.opt_scale_api.create_user(email=email, display_name=display_name, password=password)

        self.mock_post.assert_called_once_with(
            endpoint="/auth/v2/users",
            data={
                "email": email,
                "display_name": display_name,
                "password": password
            }
        )
        assert result == mock_response

    async def test_get_user_id(self):
        mock_response = {
            "created_at": 1730126521,
            "deleted_at": 0,
            "id": "f0bd0c4a-7c55-45b7-8b58-27740e38789a",
            "display_name": "Spider Man",
            "is_active": True,
            "type_id": 1,
            "email": "peter.parker@iamspiderman.com",
            "scope_id": None,
            "slack_connected": False,
            "is_password_autogenerated": False,
            "jira_connected": False,
            "scope_name": None
        }
        self.mock_get.return_value = mock_response
        result = await self.opt_scale_api.get_user_by_id(user_id="f0bd0c4a-7c55-45b7-8b58-27740e38789a",
                                                         admin_api_key="f2312f2b-46h0-4456-o0i9-58e64f2j6725")
        self.mock_get.assert_called_once_with(
            endpoint="/auth/v2/users/f0bd0c4a-7c55-45b7-8b58-27740e38789a",
            headers={"Secret": "f2312f2b-46h0-4456-o0i9-58e64f2j6725"}
        )
        assert result == mock_response

    async def test_invalid_user_id(self):
        mock_response = {
            "error": {
                "status_code": 404,
                "error_code": "OA0043",
                "reason": "User with id f0bd0c4a-7c55-45b7-8b58-27740e38789k not found",
                "params": [
                    "f0bd0c4a-7c55-45b7-8b58-27740e38789k"
                ]
            }
        }
        self.mock_get.return_value = mock_response

        result = await self.opt_scale_api.get_user_by_id(user_id="f0bd0c4a-7c55-45b7-8b58-27740e38789k",
                                                         admin_api_key="f2312f2b-46h0-4456-o0i9-58e64f2j6725")
        self.mock_get.assert_called_once_with(
            endpoint="/auth/v2/users/f0bd0c4a-7c55-45b7-8b58-27740e38789k",
            headers={"Secret": "f2312f2b-46h0-4456-o0i9-58e64f2j6725"})
        assert result == mock_response

    async def test_with_no_admin_api_key(self):
        mock_response = {
            "error": {
                "status_code": 403,
                "error_code": "OA0006",
                "reason": "Bad secret",
                "params": []
            }
        }
        self.mock_get.return_value = mock_response
        self.opt_scale_api._auth_client.obtain_admin_api_key = AsyncMock(
            return_value={"Secret": "this.is.not.valid"})
        result = await self.opt_scale_api.get_user_by_id(user_id="f0bd0c4a-7c55-45b7-8b58-27740e38789a",
                                                         admin_api_key="this.is.not.valid")


        self.mock_get.assert_called_once_with(
            endpoint="/auth/v2/users/f0bd0c4a-7c55-45b7-8b58-27740e38789a",
            headers={"Secret": "this.is.not.valid"})
        assert result == mock_response

    # async def test_create_user_token(self):
    #     mock_response = {
    #         "token": "MDAwZWxvY2F0aW9uIAowMDM0aWRlbnRpZmllciBmMGJkMGM0YS03YzU1LTQ1YjctOGI1OC0yNzc0MGUzODc4OWEKMDAyM2NpZCBjcmVhdGVkOjE3MzAxNDA3MDEuNzk3NDA5MwowMDE3Y2lkIHJlZ2lzdGVyOkZhbHNlCjAwMWFjaWQgcHJvdmlkZXI6b3B0c2NhbGUKMDAyZnNpZ25hdHVyZSDAiphxSkvSmiZI6eqCgqohlKYCzcKCchmHES38yC96nQo",
    #         "digest": "0a498f9f0aeadd67a59b93cbde528a45",
    #         "user_id": "f0bd0c4a-7c55-45b7-8b58-27740e38789a",
    #         "created_at": "2024-10-28T18:38:21",
    #         "valid_until": "2024-11-04T18:38:21",
    #         "ip": "1.2.3.4",
    #         "user_email": "peter.parker@iamspiderman.com"
    #     }
    #     # Define input values
    #     email = "peter.parker@iamspiderman.com"
    #     password = "With great power comes great responsibility"
    #     self.mock_post.return_value = mock_response
    #     result = await self.opt_scale_api.obtain_auth_token_with_user_credentials(email="peter.parker@iamspiderman.com",
    #                                                                               password="With great power comes great responsibility",
    #                                                                               bearer_token="MDAwZWxvY2F0aW9uIAowMDM0aWRlbnRpZmllciBmMGJkMGM0YS03YzU1LTQ1YjctOGI1OC0yNzc0MGUzODc4OWEKMDAyMmNpZCBjcmVhdGVkOjE3MzAxMjY1MjEuMDMwNzU4CjAwMTZjaWQgcmVnaXN0ZXI6VHJ1ZQowMDFhY2lkIHByb3ZpZGVyOm9wdHNjYWxlCjAwMmZzaWduYXR1cmUg4Ri0H_K4_xmY_fp8WvfIqZbzsrXK0P6I0KVTi8gRHkYK")
    #     self.mock_post.assert_called_once_with(
    #         endpoint="/auth/v2/token",
    #         headers={"Authorization":
    #                      "Bearer MDAwZWxvY2F0aW9uIAowMDM0aWRlbnRpZmllciBmMGJkMGM0YS03YzU1LTQ1YjctOGI1OC0yNzc0MGUzODc4OWEKMDAyMmNpZCBjcmVhdGVkOjE3MzAxMjY1MjEuMDMwNzU4CjAwMTZjaWQgcmVnaXN0ZXI6VHJ1ZQowMDFhY2lkIHByb3ZpZGVyOm9wdHNjYWxlCjAwMmZzaWduYXR1cmUg4Ri0H_K4_xmY_fp8WvfIqZbzsrXK0P6I0KVTi8gRHkYK"
    #                  },
    #         data={
    #             "password": password,
    #             "email": email
    #         }
    #     )
    #     assert result == mock_response
