import logging
from unittest.mock import AsyncMock

import pytest

from app.core.exceptions import OptScaleAPIResponseError
from app.optscale_api.users_api import OptScaleUserAPI

USER_ID = "f0bd0c4a-7c55-45b7-8b58-27740e38789a"
ADMIN_API_KEY = "f2312f2b-46h0-4456-o0i9-58e64f2j6725"
EMAIL = "peter.parker@iamspiderman.com"
DISPLAY_NAME = "Spider Man"
PASSWORD = "With great power comes great responsibility"


@pytest.fixture
def optscale_api():
    """Provides a clean instance of OptScaleUserAPI for each test."""
    return OptScaleUserAPI()


@pytest.fixture
def mock_post(mocker, optscale_api):
    """Mock the `post` method in `api_client`."""
    mock_post = mocker.patch.object(optscale_api.api_client, "post", new=AsyncMock())
    return mock_post


async def test_register_invited_user_on_optscale(caplog, optscale_api, mock_post):
    mock_response = {
        "created_at": 1730126521,
        "deleted_at": 0,
        "id": USER_ID,
        "display_name": DISPLAY_NAME,
        "is_active": True,
        "type_id": 1,
        "email": EMAIL,
        "verified": False,
        "scope_id": None,
        "slack_connected": False,
        "is_password_autogenerated": False,
        "jira_connected": False,
        "token": None,
    }
    mock_post.return_value = mock_response
    result = await optscale_api.create_user(
        email=EMAIL,
        display_name=DISPLAY_NAME,
        password=PASSWORD,
        verified=False,
        admin_api_key="test_key",
    )
    assert result == mock_response, "Expected a valid user creation response"
    log_to_verify = (
        "User successfully created: {'created_at': 1730126521, 'deleted_at': 0, 'id': "
        "'f0bd0c4a-7c55-45b7-8b58-27740e38789a', 'display_name': 'Spider Man', "
        "'is_active': True, 'type_id': 1, 'email': 'peter.parker@iamspiderman.com', "
        "'verified': False, 'scope_id': None, 'slack_connected': False, "
        "'is_password_autogenerated': False, 'jira_connected': False, 'token': None}"
    )
    assert log_to_verify == caplog.messages[0]


async def test_create_duplicate_user(caplog, optscale_api, mock_post):
    mock_response = {
        "data": {
            "error": {
                "error_code": "OA0042",
                "params": ["jerry.drake2@alphaagancy.com"],
                "reason": "User jerry.drake2@alphaagancy.com already exists",
                "status_code": 409,
            }
        },
        "error": 'HTTP error: 409 - {"error": {"status_code": 409, "error_code": "OA0042", '
        '"reason": "User jerry.drake2@alphaagancy.com already exists", '
        '"params": ["jerry.drake2@alphaagancy.com"]}}',
        "status_code": 409,
    }
    mock_post.return_value = mock_response
    with caplog.at_level(logging.ERROR):
        with pytest.raises(  # noqa: PT012
            OptScaleAPIResponseError, match=""
        ):
            await optscale_api.create_user(
                email=EMAIL,
                display_name=DISPLAY_NAME,
                password=PASSWORD,
                admin_api_key="test_key",
            )
            mock_post.assert_called_once_with(
                endpoint="/auth/v2/users",
                data={
                    "email": EMAIL,
                    "display_name": DISPLAY_NAME,
                    "password": PASSWORD,
                },
            )
            # Verify the error log
    assert "Failed to create the requested user" in caplog.text
